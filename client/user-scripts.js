/* *************************
 *** USER SIGNUP ***
 ************************** */
function userSignUp() { // goal is for new user to be able to sign up. This function will fetch info from our user/create endpoint on the server and handle that information by chaining promises together.
    console.log('userSignUp Function Called');
    let userEmail = document.getElementById("emailSignup").value; // setting up variables to pull input values from the DOM
    let userPass = document.getElementById("pwdSignup").value;

    let newUserData = { // user object containing the above variables... we're gathering what the user is inputting
        user: {
            email: userEmail,
            password: userPass
        }
    };
    console.log(`newUserData --> ${newUserData.user.email} ${newUserData.user.password}`);

    fetch(`http://localhost:3000/user/register`, { // fetching the endpoint that's created in our server
            method: "POST", // POST method matches the method on the server side. The route in the server handles a POST request, so our method is POST. Must match. If a route takes a POST request, then the declared method in the request should be POST
            headers: {
                "Content-Type": "application/json" // these lines 18-21 mean that we're dealing with JSON text content
            },
            body: JSON.stringify(newUserData) // sending data through the body of this request; the newUserData is turned into a JSON string
        })
        .then(response => response.json()) // parse the response into JSON
        .then(data => { // console logging the response, then creating the token variable to store it
            console.log(data);
            let token = data.sessionToken;
            localStorage.setItem('SessionToken', token); // accessing the localStorage for the current domain we are using and use the setItem method to the SessionToken in local storage to be the token generated by our server.
            tokenChecker(); // calling tokenChecker
        })
        .catch(err => {
            console.log(err)
        })
};


/* *************************
 *** USER LOGIN ***
 ************************** */
function userLogin() {
    let userEmail = document.getElementById("emailLogin").value; // setting up variables to pull input values from the DOM
    let userPass = document.getElementById("pwdLogin").value;
    console.log(userEmail, userPass)

    let userData = { // user object containing the above variables... we're gathering what the user is inputting
        user: {
            email: userEmail,
            password: userPass
        }
    };
    console.log(userData);

    fetch(`http://localhost:3000/user/login`, { // fetching the endpoint that's created in our server
            method: "POST", // POST method matches the method on the server side. The route in the server handles a POST request, so our method is POST. Must match. If a route takes a POST request, then the declared method in the request should be POST
            headers: {
                "Content-Type": "application/json" // these lines 55-57 mean that we're dealing with JSON text content
            },
            body: JSON.stringify(userData) // sending data through the body of this request; the newUserData is turned into a JSON string
        })
        .then(response => response.json()) // parse the response into JSON
        .then(data => { // console logging the response, then creating the token variable to store it
            console.log(data);
            let token = data.sessionToken;
            localStorage.setItem('SessionToken', token); // accessing the localStorage for the current domain we are using and use the setItem method to the SessionToken in local storage to be the token generated by our server.
            tokenChecker(); // calling tokenChecker
        })
        .catch(err => {
            console.log(err)
        })
}


/* *************************
 *** USER LOGOUT ***
 ************************** */
function userLogout() {
    localStorage.setItem('SessionToken', undefined); // setting the token to undefined means the user will no longer have a token in localStorage, which is what gives them access to certain portions of the site that use protected routes
    console.log(`SessionToken --> ${localStorage.SessionToken}`);
    tokenChecker();
}


/* *************************
 *** TOKEN CHECKER FUNCTION ***
 ************************** */
function tokenChecker() { // this function is called in all above functions -- this function is looking for any changes in the token (whether one exists or not) to give the user a bit of feedback
    console.log('tokenChecker Function Called')

    let display = document.getElementById('journals');
    let header = document.createElement('h5');
    let accessToken = localStorage.getItem('SessionToken');
    let alertText = "Log in or sign up to get started!";

    for (let i = 0; i < display.childNodes.length; i++) {
        display.removeChild(display.firstChild);
    }

    if (accessToken === 'undefined') {
        display.appendChild(header);
        header.textContent = alertText;
        header.setAttribute('id', 'defaultLogin');
    } else {
        null
    }
}
tokenChecker();